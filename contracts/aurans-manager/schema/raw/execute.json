{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Message type for `execute` entry_point",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "admin",
            "max_year_register",
            "name_code_id",
            "resolver_code_id"
          ],
          "properties": {
            "admin": {
              "type": "string"
            },
            "max_year_register": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "name_code_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "resolver_code_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_prices"
      ],
      "properties": {
        "update_prices": {
          "type": "object",
          "required": [
            "prices"
          ],
          "properties": {
            "prices": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  },
                  {
                    "$ref": "#/definitions/Coin"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_verifier"
      ],
      "properties": {
        "update_verifier": {
          "type": "object",
          "required": [
            "backend_pubkey"
          ],
          "properties": {
            "backend_pubkey": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register"
      ],
      "properties": {
        "register": {
          "type": "object",
          "required": [
            "backend_signature",
            "metadata",
            "name"
          ],
          "properties": {
            "backend_signature": {
              "$ref": "#/definitions/Binary"
            },
            "metadata": {
              "$ref": "#/definitions/Metadata"
            },
            "name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "extend"
      ],
      "properties": {
        "extend": {
          "type": "object",
          "required": [
            "backend_signature",
            "durations",
            "name"
          ],
          "properties": {
            "backend_signature": {
              "$ref": "#/definitions/Binary"
            },
            "durations": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unregister"
      ],
      "properties": {
        "unregister": {
          "type": "object",
          "required": [
            "names"
          ],
          "properties": {
            "names": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "coin",
            "receiver"
          ],
          "properties": {
            "coin": {
              "$ref": "#/definitions/Coin"
            },
            "receiver": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "required": [
        "bech32_prefixes",
        "durations"
      ],
      "properties": {
        "animation_url": {
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Trait"
          }
        },
        "background_color": {
          "type": [
            "string",
            "null"
          ]
        },
        "bech32_prefixes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "durations": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "external_url": {
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        },
        "royalty_payment_address": {
          "description": "The payment address, may be different to or the same as the minter addr question: how do we validate this?",
          "type": [
            "string",
            "null"
          ]
        },
        "royalty_percentage": {
          "description": "This is how much the minter takes as a cut when sold royalties are owed on this token if it is Some",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "youtube_url": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Trait": {
      "type": "object",
      "required": [
        "trait_type",
        "value"
      ],
      "properties": {
        "display_type": {
          "type": [
            "string",
            "null"
          ]
        },
        "trait_type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
